version: 2.1
orbs:
  slack: circleci/slack@4.9.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name UdaPeople-Backend-${CIRCLE_WORKFLOW_ID:0:8}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive
            aws cloudformation delete-stack --stack-name UdaPeople-Frontend-${CIRCLE_WORKFLOW_ID:0:8}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # get migration status from AWS SSM Parameter store
            MIGRATION_STATUS=$(aws ssm get-parameter --name udapeople_migration_${CIRCLE_WORKFLOW_ID:0:8} --query 'Parameter.Value' --output text)

            if [ $MIGRATION_STATUS == 'FAIL' ]
              then
                echo "Migration FAILED, Revert Migration"
                cd ~/project/backend
                npm install
                npm run migrations:revert
                exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build002
      - run:
          name: Install Frontend Dependencies
          command: |
            cd frontend
            echo "Install Dependencies"
            npm install
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build002
      - run:
          name: Build Frontend
          command: |
            cd frontend
            echo "Build frontend"
            npm run build
            echo "frontend compiled files"
            ls dist
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build002
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build002
      - run:
          name: Front-end Scan with force fix
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build0003
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             echo "backend compiled files"
             ls dist
      - save_cache:
          paths: 
            - backend/node_modules
          key: backend-build0003
      - run:
          name: tar backend
          command: |
            id
            cp -r ./backend/node_modules  ./backend/dist
            ls ./backend/dist
            tar -czf myapp.tar.gz ./backend/dist
            pwd
            ls -lh myapp.tar.gz
      - persist_to_workspace:
          root: ~/project
          paths:
            - myapp.tar.gz
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build0003
      - run:
          name: Back-end Test
          command: |
             cd backend
             npm test

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build0003
      - run:
          name: Back-end Scan with force fix
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm install --save-dev webpack@5.74.0
            npm update mkdirp --depth 2
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople-project-backend \
              --stack-name UdaPeople-Backend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
          no_output_timeout: 20m
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople-project-frontend \
              --stack-name UdaPeople-Frontend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
          no_output_timeout: 20m
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip git curl wget
      - run:
          name: Backend IP to ansible inventory & SSM
          command: |
            pwd
            ec2TagValue="backend-${CIRCLE_WORKFLOW_ID:0:8}"
            BACKEND_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=$ec2TagValue" \
              --output text)
            echo ${BACKEND_URL} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            aws ssm put-parameter --name BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:8} \
              --type "String" --tier Standard --value ${BACKEND_URL}
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "59:9f:6a:0a:42:f6:b0:ec:b6:d7:ff:fb:da:ca:1c:ca"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible
          command: |
            pip install ansible
      - run:
          name: Configure server
          command: |
            pwd
            ls
            echo "check .circleci/ansible/inventory.txt"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment   
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install less
            cd /tmp
            pwd
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            ls
            unzip awscliv2.zip
            ls
            sudo ./aws/install
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_output.log
            cat migration_output.log
      - run:
          name: save migration results to aws ssm parameter store
          command: |
            cd backend
            if grep "has been executed successfully" migration_output.log
              then
                echo "migration_${CIRCLE_WORKFLOW_ID:0:8} SUCCESS"
                aws ssm put-parameter --name udapeople_migration_${CIRCLE_WORKFLOW_ID:0:8} --type "String" --tier Standard --value "SUCCESS"
              else
                if grep "No migrations are pending" migration_output.log
                  then
                    echo "migration_${CIRCLE_WORKFLOW_ID:0:8} NoMigrationPending"
                    aws ssm put-parameter --name udapeople_migration_${CIRCLE_WORKFLOW_ID:0:8} --type "String" --tier Standard --value "NoMigrationPending"
                  else
                    echo "migration_${CIRCLE_WORKFLOW_ID:0:8} Fail"
                    aws ssm put-parameter --name udapeople_migration_${CIRCLE_WORKFLOW_ID:0:8} --type "String" --tier Standard --value "FAIL"
                fi
            fi
          when: always
      
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install less
            cd /tmp
            pwd
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            ls
            unzip awscliv2.zip
            ls
            sudo ./aws/install
            aws --version  
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND=$(aws ssm get-parameter --name BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:8} --query 'Parameter.Value' --output text)
            export API_URL="http://${BACKEND}:3030"
            echo "${API_URL}"
            aws ssm put-parameter --name udapeople_API_URL_${CIRCLE_WORKFLOW_ID:0:8} --type "String" --tier Standard --value "${API_URL}"
      - run:
          name: build frontend with API_URL
          command: |
            echo "API_URL: ${API_URL}"
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8}
      - run:
          name: frontend URL
          command: |
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:8}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            echo "Frontend URL:"
            echo ${FRONTEND_URL}
            aws ssm put-parameter --name udapeople_FRONTEND_URL_${CIRCLE_WORKFLOW_ID:0:8} --type "String" --tier Standard --value "${FRONTEND_URL}"
      - destroy-environment    
                    
  deploy-backend:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "59:9f:6a:0a:42:f6:b0:ec:b6:d7:ff:fb:da:ca:1c:ca"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible
          command: |
            pip install ansible

      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/inventory.txt
            pwd
            ls -lh ~/project/myapp.tar.gz
            #BACKEND=$(aws ssm get-parameter --name BACKEND_URL_${CIRCLE_WORKFLOW_ID:0:8} --query 'Parameter.Value' --output text)
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
  
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Smoke Test Backend
          command: |
            API_URL=$(aws ssm get-parameter --name udapeople_API_URL_${CIRCLE_WORKFLOW_ID:0:8} --query 'Parameter.Value' --output text)
            curl ${API_URL}
            if curl -s "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
            fi
      - run:
          name: Smoke Test Frontend
          command: |
            FRONTEND_URL=$(aws ssm get-parameter --name udapeople_FRONTEND_URL_${CIRCLE_WORKFLOW_ID:0:8} --query 'Parameter.Value' --output text)
            if curl -s ${FRONTEND_URL} | grep "Welcome"
              then
                return 1
              else
                return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip git curl wget
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=UdaPeople-project-cloudfront \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:8}
      # - aws cloudfromation rollback

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi

workflows:
  udapeople:
    jobs:
      - build-frontend:
          context: slack-secret
      - build-backend:
          context: slack-secret
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]